// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum JitCategory {
  ESCAPE
  SUB
  SWEEP
  PASS
  CONTROL
  GUARD
  TAKEDOWN
}

enum JitPercentage {
  LOW
  HIGH
}

model Position {
  id   String @id @default(cuid())
  name String @unique

  // Relationships
  jits Jit[] @relation("PositionJits")

  // Indexes
  @@index([name])
}

model Jit {
  id         String        @id @default(cuid())
  createdOn  DateTime      @default(now())
  name       String        @default("")
  category   JitCategory
  percentage JitPercentage
  notes      String        @default("")

  // Relationships
  users        User[]         @relation("JitParticipants")
  positions    Position[]     @relation("PositionJits")
  SequenceJits SequenceJits[]
  KnownJit     KnownJit[]

  // Indexes
  @@index([category, percentage])
}

enum UserRole {
  USER
  COACH
  MANAGER
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  role      UserRole
  createdOn DateTime @default(now())

  // Relationships
  jits      Jit[]      @relation("JitParticipants")
  knownJits KnownJit[] @relation("KnownJits")
  groups    Group[]    @relation("GroupMembers")
  sequences Sequence[] @relation("UserSequences")
}

model Group {
  id        String   @id @default(cuid())
  title     String
  createdOn DateTime @default(now())
  creatorId String

  // Relationships
  members User[] @relation("GroupMembers")
}

model KnownJit {
  level        Int
  hitRolling   Int
  hitCompeting Int

  // Relationships
  user User @relation("KnownJits", fields: [userId], references: [id])
  jit  Jit  @relation(fields: [jitId], references: [id])

  // Fields that represent foreign keys to improve query performance
  // Added @map directive to improve database integrity
  userId String @map("user_id")
  jitId  String @map("jit_id")

  @@id([userId, jitId])
  @@index([userId])
  @@index([jitId])
}

model Sequence {
  id        String   @id @default(cuid())
  createdOn DateTime @default(now())
  name      String?

  // Relationships
  user User @relation("UserSequences", fields: [ownerId], references: [id])

  // Fields that represent foreign keys to improve query performance
  // Added @map directive to improve database integrity
  ownerId      String         @map("owner_id")
  jitName      String         @map("jit_name")
  SequenceJits SequenceJits[]

  // Indexes
  @@index([ownerId])
  @@index([jitName])
}

model SequenceJits {
  id         String   @id @default(cuid())
  createdOn  DateTime @default(now())
  sequence   Sequence @relation(fields: [sequenceId], references: [id])
  sequenceId String
  jit        Jit      @relation(fields: [jitId], references: [id])
  jitId      String
  order      Int

  // Indexes
  @@index([sequenceId])
  @@index([jitId])
}
