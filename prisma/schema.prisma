generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  metadata        Json?
  firstName       String?
  lastName        String?
  DOB             DateTime?
  role            userRole         @default(USER)
  email           String           @unique
  updatedAt       DateTime         @updatedAt
  userName        String?
  jits            Jit[]
  userCurriculums UserCurriculum[]

  @@index([id])
}

model Jit {
  id           String      @id @default(uuid())
  createdAt    DateTime    @default(now())
  metadata     Json?
  userId       String
  curriculumId String?
  isFavorite   Boolean     @default(true)
  isGoal       Boolean     @default(false)
  updatedAt    DateTime    @updatedAt
  categoryId   String?
  moveId       String?
  positionId   String?
  sessions     Session[]
  notes        Note[]
  user         User        @relation(fields: [userId], references: [id])
  curriculum   Curriculum? @relation(fields: [curriculumId], references: [id])
  category     Category?   @relation(fields: [categoryId], references: [id])
  position     Position?   @relation(fields: [positionId], references: [id])
  move         Move?       @relation(fields: [moveId], references: [id])

  @@index([userId])
  @@index([curriculumId])
  @@index([categoryId])
  @@index([positionId])
  @@index([moveId])
}

model Category {
  id        String     @id @default(uuid())
  name      String
  metadata  Json?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Jit       Jit[]
  Position  Position[]
}

model Position {
  id             String       @id @default(uuid())
  name           String
  metadata       Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  categoryTypeId String
  customNames    CustomName[]
  Jit            Jit[]
  categoryType   Category     @relation(fields: [categoryTypeId], references: [id])

  @@index([categoryTypeId])
}

model Move {
  id          String       @id @default(uuid())
  name        String
  metadata    Json?
  createdAt   DateTime     @default(now())
  customName  String?
  updatedAt   DateTime     @updatedAt
  customNames CustomName[]
  Jit         Jit[]
}

model Curriculum {
  id              String           @id @default(uuid())
  metadata        Json?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  name            String?
  userCurriculums UserCurriculum[]
  jits            Jit[]
}

model Session {
  id        String   @id @default(uuid())
  jitId     String
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  jit       Jit      @relation(fields: [jitId], references: [id])

  @@index([jitId])
}

model UserCurriculum {
  id           String     @id @default(uuid())
  metadata     Json?
  userId       String
  curriculumId String
  user         User       @relation(fields: [userId], references: [id])
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id])

  @@index([userId])
  @@index([curriculumId])
}

model CustomName {
  id         String               @id @default(uuid())
  name       String
  entityType AssociatedEntityType @default(Position)
  positionId String?
  moveId     String?
  metadata   Json?
  position   Position?            @relation(fields: [positionId], references: [id])
  move       Move?                @relation(fields: [moveId], references: [id])

  @@index([positionId])
  @@index([moveId])
}

model Note {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  jitId      String
  metadata   Json?
  body       String
  isFavorite Boolean  @default(false)
  jit        Jit      @relation(fields: [jitId], references: [id])

  @@index([jitId])
}

enum userRole {
  ADMIN
  USER
  COACH
  MANAGER
}

enum AssociatedEntityType {
  Position
  Move
}
